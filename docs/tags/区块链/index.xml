<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>区块链 on Taylor&#39;s Blog</title>
    <link>https://taylor0931.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/</link>
    <description>Recent content in 区块链 on Taylor&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 03 Aug 2021 12:21:50 +0800</lastBuildDate><atom:link href="https://taylor0931.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>什么是区块链？</title>
      <link>https://taylor0931.github.io/posts/block_chain_1/</link>
      <pubDate>Tue, 03 Aug 2021 12:21:50 +0800</pubDate>
      
      <guid>https://taylor0931.github.io/posts/block_chain_1/</guid>
      <description>本文记录了非技术专业出身人员对区块链技术整体认知的建立过程，该系列将分为区块链概述、数字货币与智能合约、底层技术、应用场景与发展发向四个部分。
此文为第一部分，理解什么是区块链。
01｜如何理解区块链？ 一、官方释义  ​	区块链（Blockchain）技术是利用块链式数据结构来验证和存储数据、利用分布式节点共识算法来生成和更新数据、利用密码学的方式保证数据传输和访问的安全性、利用由自动化脚本代码组成的智能合约来编程和操作数据的一种全新的分布式基础架构与计算范式。
——《中国区块链技术与应用白皮书》（2016）
  ​	区块链是一个去中心化的分布式数据库，该数据库由一串使用密码学方法产生的数据区块有序链接而成，区块中包含有一定时间内产生的无法被篡改的数据记录信息。
​	区块中包含数据记录、当前区块根哈希（Hash）、前一区块根哈希、时间戳以及其他信息。数据记录在存储过程中，通常组织为树形式，比如默克尔树，而区块根哈希实际就是数据记录树的根节点哈希，为根据数据记录树自下而上逐步通过SHA-256等哈希算法计算得出。时间戳为区块的生成时间。其他信息包括区块签名信息、随机值等信息，也可根据具体应用场景灵活定义。
——《区块链：从数字货币到信用社会》
 无论是国家发布的白皮书，还是区块链相关的书籍，在定义区块链时使用的都是专业术语，即使挨个查询了这些术语，我仍然没有底气说我理解了这个概念。
那抛开这些专业的材料和解释，有没有一种简单的方式来理解区块链呢？
二、漫画区块链 我们先来看看下面的漫画案例：
假如某一天你因为肚子痛，跑到村里的医院去看病，忍着剧烈不适好不容易做完了一系列的检查，结果卫生所的医生告诉你这病他治不了，建议你转到市里的医院去看；
于是你吭哧吭哧的跑到了市里的三甲医院，想让医生基于村里卫生所的各项化验结果赶紧给个处方，然而市医院的医生开出，依旧是一堆要做的检查；
这样的现象非常普遍，同样的检查，去不同的医院需要重复做，即使病人带上了之前的化验结果，医生也还是要求重新跑一遍流程，既耽误患者时间，还浪费社会资源，为什么还要这么做呢？
我们将每一家医院看做是一个数据库，病人的病例信息都会上传到自家的数据库中存档。问题在于，每家医院的数据库都是相互独立、互不通气的，这就导致患者转院时需要重复做检查，这么做一方面可以减少医生误诊的风险（比如不信任别的医院检查结果），另一方面也是出于医院的病例信息收集和存储的要求。
如果将所有医院的数据库打通，实现病例信息共享，并落实好检验责任人，这样就可以避免重复性检查的发生。
好，漫画到这里就结束了，但是有几个问题它没有解释清楚。比如区块到底是什么？区块与区块之间的链路是如何产生？通过什么样的机制让区块之间链起来的？
三、进一步深挖 Q1: 怎么理解「区块」？ 按照字面意思，我们可以把「区块」想象成一个个的信封，用于存放本次获取到的数据 or 信息，每写入一次数据就会对应创建一个新的区块。
每个「区块」包含两个部分：
  head部分
记录当前区块相关的元数据，比如生成时间，上一个区块的hash值，以及当前区块的hash值等；
  body部分
记录当前区块存储的具体数据
  Q2：区块与区块之间的链接机制 利用密码学里的一种「hash算法」实现区块与区块间的链接。目前比较通用的算法之一叫 SHA256。
我们继续深入扩展，了解一下 hash 算法的具体原理
Q3：Hash 算法原理 上图的左边部分是区块的伪代码，去头去尾，我们重点看一下中间的几行hash值的计算代码。
很容易观察到 hash 值的计算仅涉及区块 head 里的数据，简单来讲，可以将 hash 值的计算改写成下方的公式： $$ blockHash = SHA256 (block.header) = SHA256 (prevBlockHash +block.body+ Nonce) $$ 即，当前区块的 hash 值由 3 个参数决定：</description>
    </item>
    
  </channel>
</rss>
